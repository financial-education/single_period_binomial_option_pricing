#+title: Single-Period Binomial Option Pricing
#+author: Matt Brigida, Ph.D.
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup

#+BEGIN_EXPORT html
  <script type="text/javascript" src="https://unpkg.com/vis-network/standalone/umd/vis-network.min.js"></script>
  <style type="text/css">
    #mynetwork {
      width: 600px;
      height: 400px;
      border: 1px solid lightgray;
    }
  </style>
#+END_EXPORT

#+BEGIN_COMMENT
<!-- much of the text and code in the presentation was first written here:  https://github.com/Matt-Brigida/investments/blob/master/chapter2.Rmd -->
#+END_COMMENT


* Overview

In this chapter we'll discuss the basis of option valuation in complete markets. To help understand this method, we'll value options by the binomial method.




* Complete Markets

The idea of a complete market is that we can replicate any security in the market through trading in other securities. 

-  For example, a market with a risk-free bond, a stock, and an option on that stock is complete if we can create an option through trading in the bond and the stock. 
  
-  The actual option is a 'redundant' security.

- Moreover, if the market is complete, then the value of the option is simply the cost of recreating it with the bond and the stock. So we don't value the option per se, we create something that is exactly the same as the option and note its cost to create.

#+BEGIN_EXPORT html
<div id="mynetwork"></div>
<script type="text/javascript">
  // create an array with nodes
  var nodes = new vis.DataSet([
    {id: 1, label: 'Bond'},
    {id: 2, label: 'Stock'},
    {id: 3, label: 'Call Option'}
//    {id: 4, label: 'Node 4'},
//    {id: 5, label: 'Node 5'}
  ]);

  // create an array with edges
  var edges = new vis.DataSet([
    {from: 3, to: 1},
    {from: 2, to: 1},
    {from: 2, to: 3},
//    {from: 2, to: 4},
//    {from: 2, to: 5},
//    {from: 3, to: 3}
  ]);

  // create a network
  var container = document.getElementById('mynetwork');
  var data = {
    nodes: nodes,
    edges: edges
  };
  var options = {


nodes : {
      //  shape : 'dot',
        size : 100,
      //  color : '#ECBF26', // select color

        font : {
            size : 20,
        //    color : '#ffffff'
        },
        borderWidth : 2
    },



//    edges: {
//      font: {
//        align: "top",
//      },
//      smooth: {
//        type: "dynamic",
//        forceDirection:
//          directionInputValue === "UD" || directionInputValue === "DU"
//            ? "vertical"
//            : "horizontal",
//        roundness: 0.0
//      },
//      arrows: {
//        to: { enabled: true, scaleFactor: 1, type: "arrow" }
//      }}
};
  var network = new vis.Network(container, data, options);
</script>
#+END_EXPORT
 

* Arbitrage 

Could the option price be any different than the value of recreating it? No. If it were this would afford an arbitrage. If the option cost more than the cost to create it, we could sell the option, create it, and net the difference. A similar arbitrage obtains if the replication cost is above the option price.


 

* Binomial Option Valuation

We start option valuation with the one-period binomial method. If you understand this, you will understand everything of importance with respect to option valuation. Beyond this, is simply applying mathematics to make the argument work in more realistic settings. The underlying economic argument is the same.

Say we have the following securities:

one-year zero-coupon risk-free bond with 5% yield.
stock priced at $100 today. The stock will either be $110 or $90 in one year.
option on the stock struck at $105 with a 1 year tenor.
Note the option will either be worth $5 or $0 in 1 year.

 

* Bond and Stock Replicating an Option


#+BEGIN_EXPORT html
<div id="bond_stock"></div>
<script type="text/javascript">
  // create an array with nodes
  var nodes = new vis.DataSet([
    {id: 1, label: 'Bond'},
    {id: 2, label: 'Stock'},
    {id: 3, label: 'Call Option'}
//    {id: 4, label: 'Node 4'},
//    {id: 5, label: 'Node 5'}
  ]);

  // create an array with edges
  var edges = new vis.DataSet([
    {from: 1, to: 3},
    {from: 2, to: 3},
//    {from: 2, to: 3},
//    {from: 2, to: 4},
//    {from: 2, to: 5},
//    {from: 3, to: 3}
  ]);

  // create a network
  var container = document.getElementById('bond_stock');
  var data = {
    nodes: nodes,
    edges: edges
  };
  var options = {


nodes : {
      //  shape : 'dot',
        size : 100,
      //  color : '#ECBF26', // select color

        font : {
            size : 20,
        //    color : '#ffffff'
        },
        borderWidth : 2
    },



    edges: {
      font: {
        align: "top",
      },
//      smooth: {
//        type: "dynamic",
//        forceDirection:
//          directionInputValue === "UD" || directionInputValue === "DU"
//            ? "vertical"
//            : "horizontal",
//        roundness: 0.0
//      },
      arrows: {
        to: { enabled: true, scaleFactor: 1, type: "arrow" }
      }}
};
  var network = new vis.Network(container, data, options);
</script>
#+END_EXPORT

#+begin_comment
```{r echo = FALSE, warning = FALSE}
require(visNetwork, quietly = TRUE)
# minimal example
nodes <- data.frame(id = 1:3,
  label = c("Bond", "Stock", "Option"),
  shape = c("circle", "circle", "circle"),
  group = c("A", "A", "B")
)
edges <- data.frame(from = c(1,2,1), to = c(3,3,2),
                    arrows = c("to", "to", ""))
visNetwork(nodes, edges, width = "100%")
```
#+end_comment

* 

We will create a portfolio of the bond and stock which pays the same as the option in both states of the world.

Replicating portfolio:

sell a bond with a \$90 face value, which gives us $\frac{90}{(1 + 0.05)} = \$85.71$ today.
buy one share of the stock for \$100.
This portfolio costs us $\$100 - \$85.71 = \$14.29$ to create. In one year the portfolio will pay \$20 in the up-state (the stock is \$110), and \$0 in the down state (the stock is \$90).

The option pays \$5 in the up-state and \$0 in the down-state. The replicating portfolio we created is exactly 4 options, and therefore the cost to create the portfolio must be 4 times the cost of a single option. This gives us the option's value: $\frac{\$14.29}{4} = \$3.57$.

If the market price is not \$3.57, can you create an arbitrage?


* Option and Stock Replicating a Bond


#+BEGIN_EXPORT html
<div id="call_stock"></div>
<script type="text/javascript">
  // create an array with nodes
  var nodes = new vis.DataSet([
    {id: 1, label: 'Bond'},
    {id: 2, label: 'Stock'},
    {id: 3, label: 'Call Option'}
//    {id: 4, label: 'Node 4'},
//    {id: 5, label: 'Node 5'}
  ]);

  // create an array with edges
  var edges = new vis.DataSet([
    {from: 3, to: 1},
    {from: 2, to: 1},
//    {from: 2, to: 3},
//    {from: 2, to: 4},
//    {from: 2, to: 5},
//    {from: 3, to: 3}
  ]);

  // create a network
  var container = document.getElementById('call_stock');
  var data = {
    nodes: nodes,
    edges: edges
  };
  var options = {


nodes : {
      //  shape : 'dot',
        size : 100,
      //  color : '#ECBF26', // select color

        font : {
            size : 20,
        //    color : '#ffffff'
        },
        borderWidth : 2
    },



    edges: {
      font: {
        align: "top",
      },
//      smooth: {
//        type: "dynamic",
//        forceDirection:
//          directionInputValue === "UD" || directionInputValue === "DU"
//            ? "vertical"
//            : "horizontal",
//        roundness: 0.0
//      },
      arrows: {
        to: { enabled: true, scaleFactor: 1, type: "arrow" }
      }}
};
  var network = new vis.Network(container, data, options);
</script>
#+END_EXPORT


#+begin_comment
```{r echo=FALSE, warning=FALSE}
require(visNetwork, quietly = TRUE)
# minimal example
nodes <- data.frame(id = 1:3,
  label = c("Option", "Stock",  "Bond"),
  shape = c("circle", "circle", "circle"),
  group = c("A", "A", "B")
)
edges <- data.frame(from = c(1,2,1), to = c(3,3,2),
                    arrows = c("to", "to", ""))
visNetwork(nodes, edges, width = "100%")

```
#+end_comment

 

* 

We will create a portfolio of the option and stock which pays the same as the bond in both states of the world.

Replicating portfolio:

sell 1 one-year call option with a $105 strike (the same that we are valuing).
buy $\frac{1}{4}$ share of the stock for $25.
At time 0 we have a cash flow of $C - $25, where $C is the price of the call option. At time 1, the replicating portfolio will pay:

up-state: $\$\frac{110}{4} - \$5 = \$22.50$
down-state: $\$\frac{90}{4} - \$0 = \$22.50$
So no matter what happens, the replicating portfolio will pay \$22.50 in one year. This is a risk-free zero-coupon bond, and therefore the price today is $\$\frac{22.50}{(1+0.05)} = \$21.43$. So we have:

$\$C - \$25 = -\$21.43 \Rightarrow \$C = \$3.57$

This is exactly the same call option value we got using the first method.

Again, if the market price is not \$3.57, can you create an arbitrage?

 

* 

#+begin_comment
```{r message=FALSE, echo=FALSE, warning=FALSE, eval = FALSE}
# library(fOptions)
sidebarLayout(
sidebarPanel(
  sliderInput(inputId = "stockToday", label = "Stock Price Today", min = 91, max = 109, step = 1, value = 100),
  sliderInput(inputId = "strike", label = "Strike Price", min = 91, max = 109, step = 1, value = 105),
  sliderInput(inputId = "stockUp", label = "Stock Price in Up-State", min = 110, max = 120, step = 1, value = 110),
  sliderInput(inputId = "stockDn", label = "Stock Price in Down-State", min = 80, max = 90, step = 1, value = 90),
 sliderInput(inputId = "rf", label = "Risk-Free Rate", min = .01, max = .05, step = .01, value = .01)
),

mainPanel(
    renderVisNetwork({
      ## calculate value of option using first approach ----
      ## we'll first try using the fOptions package 
      ## scratch that -- use the fOptions for the binomial tree -- calculate by hand below ----

  if((input$rf + 1) * input$stockToday > input$stockUp) {
      visNetwork(nodes = data.frame(id = 1, label = "Why bother with the option when you can have free money!", shape = "diamond", color = "darkred"))
  } else {
      ### calculating by replicating a bond
      
      optionUp <- input$stockUp - input$strike
      optionDn <- max(input$stockDn - input$strike, 0)
        
      delta <- (optionUp - optionDn) / (input$stockUp - input$stockDn)
      
      ## replicating port: sell call and buy delta shares of stock.  At time 1 it is worth:
      portVal1 <- input$stockUp * delta - optionUp
      portVal0 <- portVal1 / (1 + input$rf)
      
      callValue <- input$stockToday * delta - portVal0
       
        
  nodes <- data.frame(id = 1:3,
    label = c(paste0("Call Today = $", round(callValue, 2)), paste0("Call Up State = $", round(optionUp, 2)),  paste0("Call Down State = $", round(optionDn, 2))),
  shape = c("circle", "diamond", "diamond"),
  group = c("C", "D", "D"),
  color = c("orange", "grey", "grey")
)
edges <- data.frame(from = c(1,1), to = c(2,3),
                    arrows = c("to", "to"))
visNetwork(nodes, edges, height = "1000px", width = "100%")
  }
        
    })
)
  # }
)
```
#+end_comment


* The Importance of Zeros

Note above we used zero-coupon bonds. Zeros are important for derivative valuation because we know exactly what our return will be when we hold them (unlike with coupon bonds).




* Credits and Collaboration


